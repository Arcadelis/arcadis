name: Engine CI

on:
  push:
    branches: ['main']
    paths:
      - 'apps/engine/**'
  pull_request:
    branches: ['main']
    paths:
      - 'apps/engine/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
      - name: Install Rust target for Soroban
        run: |
          source $HOME/.cargo/env
          rustup target remove wasm32v1-none || true # Remove if it exists, ignore errors
          rustup target add wasm32-unknown-unknown
      - name: Install Stellar CLI with Homebrew
        run: |
          brew update
          brew install stellar-cli
          stellar --version

      - name: Print Stellar CLI Version
        run: |
          stellar --version
      - name: Detect Nightly Toolchain
        id: detect_nightly
        run: |
          source $HOME/.cargo/env
          if rustc --version | grep -q "nightly"; then
            echo "NIGHTLY_TOOLCHAIN=true" >> $GITHUB_ENV
          else
            echo "NIGHTLY_TOOLCHAIN=false" >> $GITHUB_ENV
          fi
      - name: Build Cargo project
        run: |
          source $HOME/.cargo/env
          if [ "${{ env.NIGHTLY_TOOLCHAIN }}" == "true" ]; then
            cargo build --verbose -Zbuild-std
          else
            cargo build --verbose
          fi
        working-directory: apps/engine

      - name: Check formatting cargo
        run: |
          cargo fmt -- --check
        working-directory: apps/engine
    
      - name: Build wasm32
        run: |
          if [ "${{ env.NIGHTLY_TOOLCHAIN }}" == "true" ]; then
            cargo build --target wasm32-unknown-unknown --release -Zbuild-std
          else
            cargo build --target wasm32-unknown-unknown --release
          fi
        working-directory: apps/engine

      - name: Build wasm32
        run: |
          if [ "${{ env.NIGHTLY_TOOLCHAIN }}" == "true" ]; then
            cargo build --target wasm32-unknown-unknown --release -Zbuild-std
          else
            cargo build --target wasm32-unknown-unknown --release
          fi
        working-directory: apps/engine

      - name: Build wasm32
        run: |
          if [ "${{ env.NIGHTLY_TOOLCHAIN }}" == "true" ]; then
            cargo build --target wasm32-unknown-unknown --release -Zbuild-std
          else
            cargo build --target wasm32-unknown-unknown --release
          fi
        working-directory: apps/engine

      - name: Explicit cargo build for wasm32-unknown-unknown
        run: |
          source $HOME/.cargo/env
          if [ "${{ env.NIGHTLY_TOOLCHAIN }}" == "true" ]; then
            cargo build --target wasm32-unknown-unknown --release -Zbuild-std
          else
            cargo build --target wasm32-unknown-unknown --release
          fi
        working-directory: apps/engine

      - name: Build Stellar contract
        run: |
          source $HOME/.cargo/env
          stellar contract build --verbose
        working-directory: apps/engine

      - name: Run Cargo tests
        run: |
          source $HOME/.cargo/env
          if [ "${{ env.NIGHTLY_TOOLCHAIN }}" == "true" ]; then
            cargo test --verbose -Zbuild-std
          else
            cargo test --verbose
          fi
        working-directory: apps/engine
